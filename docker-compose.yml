version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5555:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: cool_service
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"       # AMQP
      - "15672:15672"     # HTTP UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    ports:
      - "6831:6831/udp"   # UDP for tracing spans
      - "16686:16686"     # Jaeger UI
      - "14268:14268"     # Collector HTTP (used by OTEL)
      - "14250:14250"     # gRPC

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]

  frontend:
    build: ./frontend
    container_name: webscraper-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8080

  backend:
    build: ./backend
    container_name: webscraper-backend
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=cool_service
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/

volumes:
  pgdata:
  redis_data:
